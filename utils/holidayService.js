const axios = require('axios');

/**
 * Fetch public holidays from Calendarific API for a given country and year.
 * @param {string} countryCode - e.g., 'IN' for India.
 * @param {number} year - e.g., 2025.
 * @returns {Promise<Array>} - Array of holiday objects with 'name' and 'date' (in YYYY-MM-DD).
 */

// GET http://<your-server-url>/api/calendarific?apiKey=<your-api-key>&countryCode=IN&year=2025

async function getHolidays(countryCode, year) {
  console.log("▶ API Key:", process.env.CALENDARIFIC_API_KEY); // Debugging API Key
  try {

    console.log("▶ Axios Request Configuration:", {
      url: 'https://calendarific.com/api/v2/holidays',
      params: {
        api_key: process.env.CALENDARIFIC_API_KEY,
        country: countryCode,
        year: year
      }
    });

    const response = await axios.get('https://calendarific.com/api/v2/holidays', {
      params: { api_key: process.env.CALENDARIFIC_API_KEY, country: countryCode, year: year }
    });
    return response.data.response.holidays.map(holiday => ({
      name: holiday.name,
      date: holiday.date.iso
    }));
  } catch (error) {
    console.error("Error fetching holidays:");
    console.error("Status Code:", error.response?.status);
    console.error("Error Message:", error.response?.data || error.message);
    throw new Error(`Unable to fetch holidays: ${error.response?.statusText || 'Unknown error'}`);
  }
}

// ORIGINAL

// async function getHolidays(countryCode, year) {
//   try {

//     const response = await axios.get('https://calendarific.com/api/v2/holidays', {
//       params: {
//         api_key: "i4buX3YVVV8R5949j6m4jA9vI6j3WJ3Y", // Your Calendarific API key
//         country: countryCode,
//         year: year
//       }
//     });
//     // Map the API response to our expected format.
//     // The JSON structure: response.data.response.holidays is an array.
//     return response.data.response.holidays.map(holiday => ({
//       name: holiday.name,
//       date: holiday.date.iso  // e.g., "2025-01-01"
//     }));
//   } catch (error) {
//     console.error('Error fetching holidays from Calendarific API:', error.message);
//     return [];
//   }
// }

/**
 * Generate fixed holidays for a given year based on custom rules:
 * - Every Sunday is a holiday.
 * - The second Saturday of each month is a holiday.
 * @param {number} year
 * @returns {Array} - Array of holiday objects { name, date } (date as YYYY-MM-DD).
 */
function generateFixedHolidays(year) {
  let holidays = [];
  for (let month = 0; month < 12; month++) {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    // Add every Sunday
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      if (date.getDay() === 0) { // Sunday
        holidays.push({ name: "Sunday Holiday", date: date.toISOString().split('T')[0] });
      }
    }
    
    // Add the second Saturday of the month
    let saturdayCount = 0;
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      if (date.getDay() === 6) { // Saturday
        saturdayCount++;
        if (saturdayCount === 2) {
          holidays.push({ name: "Second Saturday", date: date.toISOString().split('T')[0] });
          break;
        }
      }
    }
  }
  return holidays;
}

/**
 * Merge two holiday arrays without duplicates (based on the 'date' property).
 * @param {Array} apiHolidays - Holidays from the API.
 * @param {Array} fixedHolidays - Holidays generated by fixed rules.
 * @returns {Array} - Merged holiday objects.
 */
/**
 * Merge two holiday arrays without duplicates.
 */
function mergeHolidays(apiHolidays, fixedHolidays) {
  const merged = new Map();
  apiHolidays.forEach(h => h.date && merged.set(h.date, h));
  fixedHolidays.forEach(h => h.date && !merged.has(h.date) && merged.set(h.date, h));
  return Array.from(merged.values());
}

module.exports = { getHolidays, generateFixedHolidays, mergeHolidays };
